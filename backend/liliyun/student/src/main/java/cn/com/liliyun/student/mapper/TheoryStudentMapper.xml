<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.liliyun.student.mapper.TheoryStudentMapper" >
  <resultMap id="BaseResultMap" type="cn.com.liliyun.theory.model.TheoryStudent" >
    <result column="id" property="id" jdbcType="INTEGER" />
    <result column="theoryId" property="theoryid" jdbcType="INTEGER" />
    <result column="storeId" property="storeid" jdbcType="INTEGER" />
    <result column="studentId" property="studentid" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="ctime" property="ctime" jdbcType="TIMESTAMP" />
    <result column="extra" property="extra" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, theoryId, storeId, studentId, remark, ctime, extra
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.com.liliyun.theory.model.TheoryStudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_theory_student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.com.liliyun.theory.model.TheoryStudentExample" >
    delete from t_theory_student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.com.liliyun.theory.model.TheoryStudent" >
    insert into t_theory_student (id, theoryId, storeId, 
      studentId, remark, ctime, 
      extra)
    values (#{id,jdbcType=INTEGER}, #{theoryid,jdbcType=INTEGER}, #{storeid,jdbcType=INTEGER}, 
      #{studentid,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{ctime,jdbcType=TIMESTAMP}, 
      #{extra,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.com.liliyun.theory.model.TheoryStudent" >
    insert into t_theory_student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="theoryid != null" >
        theoryId,
      </if>
      <if test="storeid != null" >
        storeId,
      </if>
      <if test="studentid != null" >
        studentId,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="ctime != null" >
        ctime,
      </if>
      <if test="extra != null" >
        extra,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="theoryid != null" >
        #{theoryid,jdbcType=INTEGER},
      </if>
      <if test="storeid != null" >
        #{storeid,jdbcType=INTEGER},
      </if>
      <if test="studentid != null" >
        #{studentid,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="ctime != null" >
        #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="extra != null" >
        #{extra,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.com.liliyun.theory.model.TheoryStudentExample" resultType="java.lang.Integer" >
    select count(*) from t_theory_student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_theory_student
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.theoryid != null" >
        theoryId = #{record.theoryid,jdbcType=INTEGER},
      </if>
      <if test="record.storeid != null" >
        storeId = #{record.storeid,jdbcType=INTEGER},
      </if>
      <if test="record.studentid != null" >
        studentId = #{record.studentid,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.ctime != null" >
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.extra != null" >
        extra = #{record.extra,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_theory_student
    set id = #{record.id,jdbcType=INTEGER},
      theoryId = #{record.theoryid,jdbcType=INTEGER},
      storeId = #{record.storeid,jdbcType=INTEGER},
      studentId = #{record.studentid,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      ctime = #{record.ctime,jdbcType=TIMESTAMP},
      extra = #{record.extra,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <insert id="insertSelectiveBatch" parameterType="java.util.List">
  	<foreach item="item" collection="list" separator=";">
  		insert into t_theory_student
	    <trim prefix="(" suffix=")" suffixOverrides="," >
	      <if test="item.id != null" >
	        id,
	      </if>
	      <if test="item.theoryid != null" >
	        theoryId,
	      </if>
	      <if test="item.storeid != null" >
	        storeId,
	      </if>
	      <if test="item.studentid != null" >
	        studentId,
	      </if>
	      <if test="item.remark != null" >
	        remark,
	      </if>
	      <if test="item.ctime != null" >
	        ctime,
	      </if>
	      <if test="item.extra != null" >
	        extra,
	      </if>
	    </trim>
	    <trim prefix="values (" suffix=")" suffixOverrides="," >
	      <if test="item.id != null" >
	        #{item.id,jdbcType=INTEGER},
	      </if>
	      <if test="item.theoryid != null" >
	        #{item.theoryid,jdbcType=INTEGER},
	      </if>
	      <if test="item.storeid != null" >
	        #{item.storeid,jdbcType=INTEGER},
	      </if>
	      <if test="item.studentid != null" >
	        #{item.studentid,jdbcType=INTEGER},
	      </if>
	      <if test="item.remark != null" >
	        #{item.remark,jdbcType=VARCHAR},
	      </if>
	      <if test="item.ctime != null" >
	        #{item.ctime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="item.extra != null" >
	        #{item.extra,jdbcType=VARCHAR},
	      </if>
	    </trim>
  	</foreach>
  </insert>
  
  <delete id="deleteByTheoryId">
  	delete from t_theory_student where theoryId = #{theoryId} and storeId = #{storeid}
  </delete>
</mapper>