<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.liliyun.student.mapper.StudentMoneyMapper">
    <resultMap id="BaseResultMap" type="cn.com.liliyun.student.model.StudentMoney">
        <id column="studentid" property="studentid" jdbcType="INTEGER"/>
        <result column="signmoney" property="signmoney" jdbcType="DECIMAL"/>
        <result column="contractmoney" property="contractmoney" jdbcType="DECIMAL"/>
        <result column="paymoney" property="paymoney" jdbcType="DECIMAL"/>
        <result column="submoney" property="submoney" jdbcType="DECIMAL"/>
        <result column="owesubmoney" property="owesubmoney" jdbcType="DECIMAL"/>
        <result column="owetrainmoney" property="owetrainmoney" jdbcType="DECIMAL"/>
        <result column="oweresitmoney" property="oweresitmoney" jdbcType="DECIMAL"/>
        <result column="owemoney" property="owemoney" jdbcType="DECIMAL"/>
        <result column="owestatus" property="owestatus" jdbcType="INTEGER"/>
        <result column="returnstatus" property="returnstatus" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="OweResultMap" type="cn.com.liliyun.student.dto.StudentMoneyDTO">
        <id column="studentid" property="studentid" jdbcType="INTEGER"/>
        <result column="storeid" property="storeid" jdbcType="INTEGER"/>
        <result column="areaid" property="areaid" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="idcard" property="idcard" jdbcType="VARCHAR"/>
        <result column="signmoney" property="signmoney" jdbcType="DECIMAL"/>
        <result column="contractmoney" property="contractmoney" jdbcType="DECIMAL"/>
        <result column="applydate" property="applydate" jdbcType="TIMESTAMP"/>
        <result column="paymoney" property="paymoney" jdbcType="DECIMAL"/>
        <result column="submoney" property="submoney" jdbcType="DECIMAL"/>
        <result column="owesubmoney" property="owesubmoney" jdbcType="DECIMAL"/>
        <result column="owetrainmoney" property="owetrainmoney" jdbcType="DECIMAL"/>
        <result column="oweresitmoney" property="oweresitmoney" jdbcType="DECIMAL"/>
        <result column="owemoney" property="owemoney" jdbcType="DECIMAL"/>
        <result column="owestatus" property="owestatus" jdbcType="INTEGER"/>
        <result column="returnstatus" property="returnstatus" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="Base_Column_List">
      studentid, signmoney, contractmoney, paymoney, submoney, owesubmoney, owetrainmoney, oweresitmoney, owemoney, owestatus, returnstatus
  </sql>

    <select id="selectOweList" resultMap="OweResultMap" parameterType="cn.com.liliyun.student.dto.StudentMoneyDTO">
        select a.name,a.idcard,a.storeid,a.areaid,a.applydate,
        b.studentid,b.owemoney,b.oweresitmoney,b.owetrainmoney,b.owesubmoney
        from t_student a join t_student_money b on a.id = b.studentid
        <if test="storeid != null">
            and a.storeid = #{storeid,jdbcType=INTEGER}
        </if>
        <if test="stime != null and stime !=''">
            and a.applydate >= #{stime,jdbcType=TIMESTAMP}
        </if>
        <if test="etime != null and etime !=''">
            and date_add(#{etime,jdbcType=TIMESTAMP},interval 1 day) > a.applydate
        </if>
        <choose>
            <when test="type !=null and type == 0">
                and b.owesubmoney > 0
            </when>
            <when test="type !=null and type == 1">
                and b.owetrainmoney > 0
            </when>
            <when test="type !=null and type == 2">
                and b.oweresitmoney > 0
            </when>
        </choose>
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="cn.com.liliyun.student.model.StudentMoney">
        select
        <include refid="Base_Column_List"/>
        from t_student_money
        where studentid = #{studentid,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="cn.com.liliyun.student.model.StudentMoney">
    delete from t_student_money
    where studentid = #{studentid,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="cn.com.liliyun.student.model.StudentMoney">
    insert into t_student_money (studentid, signmoney, contractmoney, paymoney,
      submoney, owesubmoney, owetrainmoney, oweresitmoney,
      owemoney, owestatus, returnstatus
      )
    values (#{studentid,jdbcType=INTEGER}, #{signmoney,jdbcType=DECIMAL}, #{contractmoney,jdbcType=DECIMAL}, #{paymoney,jdbcType=DECIMAL},
      #{submoney,jdbcType=DECIMAL}, #{owesubmoney,jdbcType=DECIMAL}, #{owetrainmoney,jdbcType=INTEGER},#{oweresitmoney,jdbcType=DECIMAL},
      #{owemoney,jdbcType=DECIMAL}, #{owestatus,jdbcType=INTEGER}, #{returnstatus,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="cn.com.liliyun.student.model.StudentMoney">
        insert into t_student_money
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="studentid != null">
                studentid,
            </if>
            <if test="signmoney != null">
                signmoney,
            </if>
            <if test="contractmoney != null">
                contractmoney,
            </if>
            <if test="paymoney != null">
                paymoney,
            </if>
            <if test="submoney != null">
                submoney,
            </if>
            <if test="owesubmoney != null">
                owesubmoney,
            </if>
            <if test="owetrainmoney != null">
                owetrainmoney,
            </if>
            <if test="oweresitmoney != null">
                oweresitmoney,
            </if>
            <if test="owemoney != null">
                owemoney,
            </if>
            <if test="owestatus != null">
                owestatus,
            </if>
            <if test="returnstatus != null">
                returnstatus,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="studentid != null">
                #{studentid,jdbcType=INTEGER},
            </if>
            <if test="signmoney != null">
                #{signmoney,jdbcType=DECIMAL},
            </if>
            <if test="contractmoney != null">
                #{contractmoney,jdbcType=DECIMAL},
            </if>
            <if test="paymoney != null">
                #{paymoney,jdbcType=DECIMAL},
            </if>
            <if test="submoney != null">
                #{submoney,jdbcType=DECIMAL},
            </if>
            <if test="owesubmoney != null">
                #{owesubmoney,jdbcType=DECIMAL},
            </if>
            <if test="owetrainmoney != null">
            #{owetrainmoney,jdbcType=INTEGER},
            </if>
            <if test="oweresitmoney != null">
                #{oweresitmoney,jdbcType=DECIMAL},
            </if>
            <if test="owemoney != null">
                #{owemoney,jdbcType=DECIMAL},
            </if>
            <if test="owestatus != null">
                #{owestatus,jdbcType=INTEGER},
            </if>
            <if test="returnstatus != null">
                #{returnstatus,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="cn.com.liliyun.student.model.StudentMoney">
        update t_student_money
        <set>
            <if test="signmoney != null">
                signmoney = #{signmoney,jdbcType=DECIMAL},
            </if>
            <if test="contractmoney != null">
                contractmoney = #{contractmoney,jdbcType=DECIMAL},
            </if>
            <if test="paymoney != null">
                paymoney = #{paymoney,jdbcType=DECIMAL},
            </if>
            <if test="submoney != null">
                submoney = #{submoney,jdbcType=DECIMAL},
            </if>
            <if test="owesubmoney != null">
                owesubmoney = #{owesubmoney,jdbcType=DECIMAL},
            </if>
            <if test="owetrainmoney != null">
                owetrainmoney = #{owetrainmoney,jdbcType=INTEGER},
            </if>
            <if test="oweresitmoney != null">
                oweresitmoney = #{oweresitmoney,jdbcType=DECIMAL},
            </if>
            <if test="owemoney != null">
                owemoney = #{owemoney,jdbcType=DECIMAL},
            </if>
            <if test="owestatus != null">
                owestatus = #{owestatus,jdbcType=INTEGER},
            </if>
            <if test="returnstatus != null">
                returnstatus = #{returnstatus,jdbcType=INTEGER},
            </if>
        </set>
        where studentid = #{studentid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.com.liliyun.student.model.StudentMoney">
    update t_student_money
    set signmoney = #{signmoney,jdbcType=DECIMAL},
      contractmoney = #{contractmoney,jdbcType=DECIMAL},
      paymoney = #{paymoney,jdbcType=DECIMAL},
      submoney = #{submoney,jdbcType=DECIMAL},
      owesubmoney = #{owesubmoney,jdbcType=DECIMAL},
      owetrainmoney = #{owetrainmoney,jdbcType=INTEGER},
      oweresitmoney = #{oweresitmoney,jdbcType=DECIMAL},
      owemoney = #{owemoney,jdbcType=DECIMAL},
      owestatus = #{owestatus,jdbcType=INTEGER},
      returnstatus = #{returnstatus,jdbcType=INTEGER}
    where studentid = #{studentid,jdbcType=INTEGER}
  </update>
  <update id="updateReceiptOweMoney" parameterType="cn.com.liliyun.student.model.StudentMoney">
  	<foreach item="item" collection="list" separator=";">
        update t_student_money
        <set>
            <if test="item.paymoney != null">
                paymoney = paymoney + #{item.paymoney,jdbcType=DECIMAL},
            </if>
            <if test="item.owesubmoney != null">
                owesubmoney = owesubmoney + #{item.owesubmoney,jdbcType=DECIMAL},
            </if>
            <if test="item.owetrainmoney != null">
                owetrainmoney = owetrainmoney + #{item.owetrainmoney,jdbcType=INTEGER},
            </if>
            <if test="item.oweresitmoney != null">
                oweresitmoney = oweresitmoney + #{item.oweresitmoney,jdbcType=DECIMAL},
            </if>
            <if test="item.owemoney != null">
                owemoney = owemoney + #{item.owemoney,jdbcType=DECIMAL},
            </if>
        </set>
        where studentid = #{item.studentid,jdbcType=INTEGER}
      </foreach>
    </update>
    <update id="updateReceiptOweStatus" parameterType="cn.com.liliyun.student.model.StudentMoney">
        update t_student_money
        set 
        	owestatus = 0
        where studentid in (${ids}) and 0 >= owemoney
    </update>
</mapper>